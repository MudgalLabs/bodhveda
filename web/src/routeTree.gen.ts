/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectsIdRouteImport } from './routes/projects/$id'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as ProjectsIdOverviewRouteImport } from './routes/projects/$id/overview'

const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRoute,
} as any)
const ProjectsIdRoute = ProjectsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProjectsRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIdOverviewRoute = ProjectsIdOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => ProjectsIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$id/overview': typeof ProjectsIdOverviewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/projects/$id/overview': typeof ProjectsIdOverviewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/projects/$id': typeof ProjectsIdRouteWithChildren
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$id/overview': typeof ProjectsIdOverviewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/auth/sign-in'
    | '/projects/$id'
    | '/projects/'
    | '/projects/$id/overview'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/sign-in'
    | '/projects/$id'
    | '/projects'
    | '/projects/$id/overview'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/auth/sign-in'
    | '/projects/$id'
    | '/projects/'
    | '/projects/$id/overview'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  AuthSignInRoute: typeof AuthSignInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$id/overview': {
      id: '/projects/$id/overview'
      path: '/overview'
      fullPath: '/projects/$id/overview'
      preLoaderRoute: typeof ProjectsIdOverviewRouteImport
      parentRoute: typeof ProjectsIdRoute
    }
  }
}

interface ProjectsIdRouteChildren {
  ProjectsIdOverviewRoute: typeof ProjectsIdOverviewRoute
}

const ProjectsIdRouteChildren: ProjectsIdRouteChildren = {
  ProjectsIdOverviewRoute: ProjectsIdOverviewRoute,
}

const ProjectsIdRouteWithChildren = ProjectsIdRoute._addFileChildren(
  ProjectsIdRouteChildren,
)

interface ProjectsRouteChildren {
  ProjectsIdRoute: typeof ProjectsIdRouteWithChildren
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsIdRoute: ProjectsIdRouteWithChildren,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  AuthSignInRoute: AuthSignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
